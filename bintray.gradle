//
// This script must be applied after android app/lib plugin.
//
// Artifact id must be set in android.defaultConfig.archivesBaseName
// use -PsignPackage to allow package signing
//

/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'

version = VERSION_NAME
group = GROUP

def correctSetup() {
  ["BINTRAY_USER",
   "BINTRAY_USER_ORG",
   "BINTRAY_PASSWORD",
   "BINTRAY_API_KEY",
   "BINTRAY_GPG_PASSPHRASE"].each {

    if (!project.hasProperty(it)) {
      println("-> bintray: $it property not found and is needed to deploy")
      return false
    }
  }
}

if (!correctSetup()) {
  println("-> bintray: No bintray properties found")
  return
}

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  hasProperty('RELEASE_REPOSITORY_URL') ? getProperty("RELEASE_REPOSITORY_URL") :
      "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? getProperty("SNAPSHOT_REPOSITORY_URL") :
      "https://oss.sonatype.org/content/repositories/snapshots/"
  //      "https://oss.jfrog.org/artifactory/oss-snapshot-local"
  //      "https://oss.jfrog.org"
}

def getRepositoryUsername() {
  return hasProperty('BINTRAY_USER') ? getProperty("BINTRAY_USER") : ""
}

def getRepositoryPassword() {
  return hasProperty('BINTRAY_PASSWORD') ? getProperty("BINTRAY_PASSWORD") : ""
}

afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: getReleaseRepositoryUrl()) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }
        snapshotRepository(url: getSnapshotRepositoryUrl()) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }

        pom.project {
          packaging "aar"
          groupId = GROUP
          artifactId = POM_ARTIFACT_ID
          version = VERSION_NAME
          name POM_NAME
          description POM_DESCRIPTION
          url POM_URL

          scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
          }

          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
              distribution POM_LICENCE_DIST
            }
          }

          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
              email POM_DEVELOPER_EMAIL
            }
          }
        }
      }
    }
  }

  signing {
    required { isReleaseBuild() && project.hasProperty("signPackage") }
    sign configurations.archives
  }

  task install(type: Upload, dependsOn: assemble) {
    repositories.mavenInstaller {
      configuration = configurations.archives

      pom.groupId = GROUP
      pom.artifactId = POM_ARTIFACT_ID
      pom.version = VERSION_NAME

      pom.project {
        name POM_NAME
        packaging "aar"
        description POM_DESCRIPTION
        url POM_URL

        scm {
          url POM_SCM_URL
          connection POM_SCM_CONNECTION
          developerConnection POM_SCM_DEV_CONNECTION
        }

        licenses {
          license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
          }
        }

        developers {
          developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
          }
        }
      }
    }
  }

  task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.kotlin.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }

  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
  }

  task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
  }
}

bintray {
  user = getProperty("BINTRAY_USER")
  key = getProperty("BINTRAY_API_KEY")

  configurations = ['archives']

  override = true
  publish = true
  dryRun = false

  pkg {
    repo = "maven"
    name = POM_ARTIFACT_ID
    userOrg = getProperty("BINTRAY_USER_ORG")
    desc = POM_DESCRIPTION
    websiteUrl = POM_URL
    issueTrackerUrl = POM_URL + '/issues'

    vcsUrl = POM_SCM_CONNECTION
    licenses = [POM_LICENCE_NAME]

    githubRepo = POM_SCM_URL
    githubReleaseNotesFile = 'README.md'

    version {
      desc = POM_DESCRIPTION
      name = VERSION_NAME
    }
  }
}